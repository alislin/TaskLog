@inherits TLComponent
@*<div class="form-group row">
    <label class="col-form-label col-lg-2">Name</label>
    <div class="col-lg-10">
        <input type="text" class="form-control" @bind="@ProjcectName" @onkeyup="OnKeyUp" />
    </div>
</div>
<div class="col">
</div>*@
<div class="input-group">
    <input type="text" class="form-control" style="display: block;" @bind="@ProjcectName" @onkeyup="OnKeyUp" />
    <span class="input-group-append">
        <span class="input-group-text pl-1 pr-1">
            @*<StrapButton StyleClass="btn m-0 p-0" CommandAction="UpdateValue" Style="StyleType.primary"><i class="icon-checkmark2"></i></StrapButton>*@
            <StrapButton StyleClass="btn m-0 p-0" CommandAction="Reset" Style="StyleType.danger"><i class="icon-cross3"></i></StrapButton>
        </span>
    </span>
</div>
@code {
    [Parameter]
    public TodoBase Project
    {
        get { return project; }
        set
        {
            project = value;
            ProjcectName = project?.Name;
        }
    }

    private TContext<TodoBaseEdit> DataContext { get; set; }

    [Parameter] public EventCallback<TodoBase> ProjectChanged { get; set; }
    [Parameter] public EventCallback<TodoBase> OnConfirm { get; set; }
    string ProjcectName;
    TodoBase project;


    protected override void OnInitialized()
    {
        try
        {
            DataContext = GetContextParameter<TodoBaseEdit>(null);
            Project = DataContext?.View?.Project;
            if (DataContext?.View?.OnConfirm != null)
            {
                OnConfirm = DataContext.View.OnConfirm;
            }
        }
        catch (Exception ex)
        {

            throw;
        }
    }

    private void OnKeyUp(KeyboardEventArgs key)
    {
        Console.WriteLine(key.Key);
        if (key.Key == "Enter")
        {
            UpdateValue(null);
        }
    }

    private async void UpdateValue(object obj)
    {
        if (string.IsNullOrWhiteSpace(ProjcectName))
        {
            return;
        }
        if (project == null)
        {
            project = new Project(ProjcectName);
        }
        else
        {
            project.Name = ProjcectName;
        }
        if (string.IsNullOrWhiteSpace(project.Id))
        {
            project.Id = project.MakeId();
        }
        await ProjectChanged.InvokeAsync(Project);
        await OnConfirm.InvokeAsync(project);
        Project = null;
        //Updkate();
    }

    private void Reset(object obj)
    {
        Project = null;
    }
}
